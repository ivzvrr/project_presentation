import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://127.0.0.1:5715/getmpzzreport"
BOT_TOKEN = "8043399839:AAGsMi50XOV4xPcGIMq5IfuhvSKC-QswVLc"
DB_FILE = "presentation_bot.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–µ—à –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π {date: bytes}
presentation_cache = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            full_name TEXT,
            access_granted BOOLEAN DEFAULT 0,
            first_seen TIMESTAMP,
            last_active TIMESTAMP
        )""")
        conn.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
async def check_access(user_id: int) -> bool:
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT access_granted FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        return result[0] if result else False

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_user_info(user: types.User):
    with sqlite3.connect(DB_FILE) as conn:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user.id,))
        exists = cursor.fetchone()
        
        if not exists:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            conn.execute("""
            INSERT INTO users 
            (user_id, username, full_name, first_seen, last_active)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """, (user.id, user.username, user.full_name))
            conn.commit()
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_active
            conn.execute("""
            UPDATE users SET 
            last_active = CURRENT_TIMESTAMP
            WHERE user_id = ?
            """, (user.id,))
            conn.commit()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"))
    builder.add(types.KeyboardButton(text="üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def dates_keyboard():
    dates = ['2020-12-31', '2021-12-31', '2022-12-31', '2023-12-31', '2024-12-31']
    builder = ReplyKeyboardBuilder()
    for date in dates:
        builder.add(types.KeyboardButton(text=date))
    builder.add(types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ó–∞–ø—Ä–æ—Å –∫ API
async def get_presentation(date=None):
    cache_key = date or "current"
    if cache_key in presentation_cache:
        return presentation_cache[cache_key]
    
    url = f"{API_URL}/{date}" if date else API_URL
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                content = await response.read()
                presentation_cache[cache_key] = content  # –ö–µ—à–∏—Ä—É–µ–º
                return content
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (message.from_user.id,))
        user_exists = cursor.fetchone()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º
    if not user_exists:
        await update_user_info(message.from_user)
    
    has_access = await check_access(message.from_user.id)
    
    if has_access:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π!",
            reply_markup=main_keyboard()
        )
    else:
        await message.answer(
            "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é")
async def download_current(message: types.Message):
    if not await check_access(message.from_user.id):
        return await message.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    
    content = await get_presentation()
    if content:
        await message.answer_document(
            BufferedInputFile(content, filename="current_presentation.pptx"),
            caption="–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
        )
    else:
        await message.answer("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.message(F.text == "üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É")
async def select_date(message: types.Message):
    if not await check_access(message.from_user.id):
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:",
        reply_markup=dates_keyboard()
    )

@dp.message(F.text.in_(['2020-12-31', '2021-12-31', '2022-12-31', '2023-12-31', '2024-12-31']))
async def handle_date(message: types.Message):
    if not await check_access(message.from_user.id):
        return
    
    content = await get_presentation(message.text)
    if content:
        await message.answer_document(
            BufferedInputFile(content, filename=f"presentation_{message.text}.pptx"),
            caption=f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∑–∞ {message.text}"
        )
    else:
        await message.answer(f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –∑–∞ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_keyboard()
    )


async def main():
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π webhook
    await bot.delete_webhook(drop_pending_updates=True)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


def grant_access(user_id: int):
    """–í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("""
        INSERT OR REPLACE INTO users 
        (user_id, access_granted, last_active) 
        VALUES (?, 1, CURRENT_TIMESTAMP)
        """, (user_id,))
        conn.commit()

if __name__ == "__main__":
    import asyncio
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    # grant_access(id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    asyncio.run(main())